use crate::ast::types::*;
use crate::ast::expression::{
    *,
    variables::*,
    operators::*
};
use crate::ast::program::*;
use crate::lexer::*;
use crate::error::*;
use crate::error::parse_error::ParsingError;
use crate::token;
use std::collections::HashMap;

grammar(program: &mut Program);

extern {
    type Location = usize;
    type Error = ParsingError<Token>;

    enum Token {
        "program" => Token::Program,
        "type" => Token::Type,
        "var" => Token::Var,
        "array" => Token::Array,
        "set" => Token::Set,
        "record" => Token::Record,
        "of" => Token::Of,
        "in" => Token::In,
        "end" => Token::End,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBrack,
        "]" => Token::RBrack,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "," => Token::Comma,
        ".." => Token::Spread,
        "." => Token::Dot,
        "=" => Token::Eq,
        "<>" => Token::Neq,
        ">" => Token::Bg,
        "<" => Token::Lt,
        ">=" => Token::Bge,
        "<=" => Token::Lte,
        "!" => Token::Not,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Mul,
        "/" => Token::RDiv,
        "div" => Token::Div,
        "mod" => Token::Mod,
        "and" => Token::And,
        "or" => Token::Or,
        "true/false" => Token::Bool(_),
        "a/b/c" => Token::Char(_),
        "123.123" => Token::Real(_),
        "123" => Token::Integer(_),
        "abc" => Token::Ident(_)
    }
}

SepList<Rule, Sep>: Vec<Rule> = {
    <mut list: SepList<Rule, Sep>> <s: Sep> <r: Rule> => {
        list.push(r);
        list
    },
    <Rule> => vec![<>]
}

Ranged<Exp>: ExBox = <l: @L> <exp: Exp> <r: @R> => ExBox::new(exp, l..r);

pub Program: () = <Header> <Declarations>;

Header: () = "program" <id: Ident> ";" => program.name = id;

Declarations: () =
    (SepList<ConstDef, ";"> ";")?
    (SepList<TypeDef, ";"> ";")?
    ("var" SepList<Field, ";"> ";")?;

ConstDef: () = <id: Ident> "=" <expr: Expression> => { program.constants.insert(id, expr); };

TypeDef: () = "type" <id: Ident> "=" <t: Type> => { program.types.insert(id, t); };

Type: Type = {
    "array" "[" <d: SepList<DimOf<ULimit>, ",">> "]" "of" <typename: Ident> => Type::ArrayOf(d, Box::new(program.types
        .get(&typename[..])
        .unwrap()
        .clone())),
    "set" "of" <typename: Ident> => Type::SetOf(Box::new(program.types.get(&typename[..])
                                                               .unwrap()
                                                               .clone())),
    "record" <f: SepList<Field, ";">> "end" => {
        Type::Record(f.into_iter()
                      .map(|(name, typename)| (name, program.types.get(&typename[..])
                                                                  .unwrap()
                                                                  .clone()))
                      .collect::<HashMap<String, Type>>())
    },
    "(" <e: SepList<Ident, ",">> ")" => Type::Enum(e),
    <d: Dim> => Type::Range(d),
    <Ident> => program.types.get(&<>[..])
                     .unwrap()
                     .clone()
}

Variable: VarRef = {
    Ident => VarRef::Immediate(<>),
    <v: Variable> "." <id: Ident> => VarRef::Field(Box::new(v), id),
    <v: Variable> "[" <e: SepList<Expression, ",">> "]" => VarRef::Index(Box::new(v), e)
}

Field: (String, String) = {
    <id: Ident> ":" <typename: Ident> => (id, typename)
}

Dim = DimOf<ILimit>;

DimOf<Limit>: std::ops::Range<Limit> = <l: Limit> ".." <r: Limit> => l..r;

ILimit: isize = {
    <sign: (AddOp)?> <i: Iconst> => (i * i64::from(Into::<bool>::into(sign.unwrap_or(SumOp::Add)))) as isize,
    <sign: (AddOp)?> <id: Ident> => program.constants.get(&id[..])
                                               .unwrap()
                                               .as_number(program)
                                               .unwrap() as isize *
                                               isize::from(Into::<bool>::into(sign.unwrap_or(SumOp::Add))),
    Cconst => <> as isize,
    Bconst => <> as isize
}

ULimit: usize = ILimit =>? {
    if <> < 0 {
        panic!("ERRROR");
    } else {
        Ok(<> as usize)
    }
};

Expression: ExBox = InExpr<LogicExpr<CompExpr<SumExpr<FactorExpr<TopExpr>>>>>;

InExpr<Next>: ExBox = {
    <l: @L> <sample: Next> "in" <set: TopExpr> <r: @R> => ExBox::new(In{
        sample,
        set
    }, l..r),
    Next
};

CompExpr<Next>: ExBox = {
    <l: @L> <prev: CompExpr<Next>> <c: Comp> <n: Next> <r: @R> => ExBox::new(Comparison {
        left: prev,
        op: c,
        right: n
    }, l..r),
    Next
}

Comp: CompOp = {
    ">" => CompOp::Bg,
    ">=" => CompOp::Bge,
    "<" => CompOp::Lt,
    "<=" => CompOp::Lte,
    "<>" => CompOp::Neq,
    "=" => CompOp::Eq
}

SumExpr<Next>: ExBox = {
    <l: @L> <prev: SumExpr<Next>> <op: AddOp> <n: Next> <r: @R> => ExBox::new(Sum {
        left: prev,
        right: n,
        op
    }, l..r),
    Next
}

AddOp: SumOp = {
    "+" => SumOp::Add,
    "-" => SumOp::Sub
}

FactorExpr<Next>: ExBox = {
    <l: @L> <prev: FactorExpr<Next>> <op: MulOp> <n: Next> <r: @R> => ExBox::new(Product {
        left: prev,
        right: n,
        op
    }, l..r),
    Next
}

MulOp: ProdOp = {
    "*" => ProdOp::Mul,
    "/" => ProdOp::RDiv,
    "div" => ProdOp::Div,
    "mod" => ProdOp::Mod
}

LogicOp: LogicOp = {
    "and" => LogicOp::And,
    "or" => LogicOp::Or
}

LogicExpr<Next>: ExBox = {
    <l: @L> <prev: LogicExpr<Next>> <op: LogicOp> <n: Next> <r: @R> => ExBox::new(Logic {
        left: prev,
        right: n,
        op
    }, l..r),
    Next
}

NotExpr<Next>: ExBox = {
    <l: @L> "!" <op: NotExpr<Next>> <r: @R> => ExBox::new(Not(op), l..r),
    Next
}

TopExpr: ExBox = {
    Ranged<Variable>,
    Ranged<Iconst>,
    Ranged<Rconst>
    Ranged<Cconst>
    Ranged<Bconst>
    Ranged<SetExpr>
    Ranged<CallExpr>
    "(" <expr: Expression> ")" => expr
}

SetExpr: Vec<ExBox> = "[" <out: SepList<Expression, ",">> "]" => out;

CallExpr: Call = <id: Ident> "(" <args: SepList<Expression, ",">> ")" => Call {
    name: id,
    args
};

Ident: String = "abc" => token!(<> => Token::Ident);

Iconst: i64 = "123" => token!(<> => Token::Integer);

Rconst: f64 = "123.123" => token!(<> => Token::Real);

Bconst: bool = "true/false" => token!(<> => Token::Bool);

Cconst: char = "a/b/c" => token!(<> => Token::Char);